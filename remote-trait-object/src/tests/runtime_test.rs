use super::mock::TestPort;
use crate as remote_trait_object;
use crate::*;
use std::io::Cursor;
use std::sync::{Arc, Weak};

fn distinct_handle(port: Weak<dyn Port>, i: u16) -> HandleInstance {
    HandleInstance {
        id: ServiceObjectId {
            index: i,
        },
        port,
    }
}

#[remote_trait_object_macro::service]
pub trait TestService: Service {
    fn fn1(&self, a1: String, a2: &str, a3: &[u8]) -> SArc<dyn TestService>;

    fn fn2(&self, a2: &u8) -> String;

    fn fn3(&self) -> String;
}

#[remote_trait_object_macro::service_impl_adv(TestService)]
pub struct TestImpl {
    pub handle: HandleInstance,
    pub name: String,
}

#[cast_to([sync])]
impl TestService for TestImpl {
    fn fn1(&self, a1: String, a2: &str, a3: &[u8]) -> SArc<dyn TestService> {
        SArc::new(Arc::new(TestImpl {
            handle: Default::default(),
            name: format!("{}{}{}", a1, a2, a3.len()),
        }))
    }

    fn fn2(&self, a2: &u8) -> String {
        format!("{}", a2)
    }

    fn fn3(&self) -> String {
        self.name.clone()
    }
}

#[test]
fn cast() {
    let port = Arc::new(TestPort::default()) as Arc<dyn Port>;

    let object = Arc::new(TestImpl {
        handle: distinct_handle(Arc::downgrade(&port), 777),
        name: Default::default(),
    });
    let t1: Arc<dyn TestService> = object;
    let t2: Arc<dyn Service> = intertrait::cast::CastArc::cast(t1).unwrap();
    let _: Arc<dyn TestService> = intertrait::cast::CastArc::cast(t2).unwrap();
}

// We enclose the tests so that we can test that test code generated by #[service]
// use intertrait well without external import statement.
mod use_cast {
    use super::*;
    pub use intertrait::{cast::CastArc, Caster};
    /*
    #[test]
    fn cast() {
        let object = Arc::new(TestImpl {
            handle: Default::default(),
            name: Default::default(),
        });
        let t1: Arc<dyn TestService> = object;
        let t2: Arc<dyn Service> = t1.cast().unwrap();
        let _: Arc<dyn TestService> = t2.cast().unwrap();
    }

    #[test]
    fn service_1() {
        mock::set_key(1);
        let s = <dyn TestService as env_mock::ImportService<dyn TestService>>::import(Default::default());
        let x = s.fn1("qwe".to_owned(), "qweqwe", b"123").unwrap();
        x.fn2(&3);
    }

    #[test]
    fn service_2() {
        mock::set_key(2);
        remote_trait_object::port::server::port_thread_local::set_key(777);

        let si = <dyn TestService as env_mock::ImportService<dyn TestService>>::import(distinct_handle(1234));
        si.fn1("s1".to_owned(), "s2", &[3]);
        {
            let (op, handle, method, (a1, a2, a3)): (String, HandleInstance, MethodId, (String, String, Vec<u8>)) =
                serde_cbor::from_slice(&mock::pop_log()).unwrap();
            assert_eq!(op, "call");
            assert_eq!(handle, distinct_handle(1234));
            // This number '7' is very specific to macro implementation.
            assert_eq!(method, 7);
            assert_eq!(a1, "s1");
            assert_eq!(a2, "s2");
            assert_eq!(a3, &[3]);
        }

        let se: Arc<dyn TestService> = Arc::new(TestImpl {
            handle: distinct_handle(2345),
            name: "Hi".to_owned(),
        });
        let mut buffer: Vec<u8> = vec![0; std::mem::size_of::<PacketHeader>()];
        let cursor = {
            let mut c = Cursor::new(&mut buffer);
            c.set_position(std::mem::size_of::<PacketHeader>() as u64);
            c
        };
        let mut args: Vec<u8> = vec![0; std::mem::size_of::<PacketHeader>()];
        let cursor2 = {
            let mut c = Cursor::new(&mut args);
            c.set_position(std::mem::size_of::<PacketHeader>() as u64);
            c
        };
        serde_cbor::to_writer(cursor2, &("s1", "s2", &[3])).unwrap();

        service_dispatch!(TestService, &*se, 7, &args, cursor);
        {
            let _: HandleInstance = serde_cbor::from_slice(&buffer[std::mem::size_of::<PacketHeader>()..]).unwrap();
            let newly_exported: Arc<dyn TestService> = mock::pop_service_log().cast::<dyn TestService>().unwrap();
            assert_eq!(newly_exported.fn3(), "s1s21");
            let (op, port_id): (String, PortId) = serde_cbor::from_slice(&mock::pop_log()).unwrap();
            assert_eq!(op, "register");
            assert_eq!(port_id, 777);
        }

        drop(si);
        {
            let (op, handle): (String, HandleInstance) = serde_cbor::from_slice(&mock::pop_log()).unwrap();
            assert_eq!(op, "delete");
            assert_eq!(handle, distinct_handle(1234));
        }
    }
    */
}
